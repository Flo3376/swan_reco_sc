'use strict';

const fs   = require('fs');
const path = require('path');
const vm   = require('vm');

require('./lib/config.js').init();

const getByString = exports.getByString = (obj, str, def) => { 
    if (!str) return def;
    let ctxt = { "data": obj , "value": undefined };
    const context = new vm.createContext(ctxt);
    const script  = new vm.Script("value = data."+str);
    try { script.runInContext(context); }
    catch(ex){ return def === undefined ? ex.message : def; }

    let result = ctxt.value === undefined ? def : ctxt.value;
    return result;
}

const setByString = exports.setByString = (obj, str, value, error) => {
    if (!str) return;
    let ctxt = { "data": obj, "value" : value };
    const context = new vm.createContext(ctxt);
    const script  = new vm.Script("data."+str+"=value"); 
    try { script.runInContext(context); }
    catch(ex){ 
        if (error) error(ex)
        else console.log(ex)
     }
}


const resolve = exports.resolve = (str, obj, def) => {
    if (str === undefined) return str;
    
    str = fastResolve(str)
    if (obj === undefined) return str;

    let rgxp = /\{([a-zA-Z0-9_'"\|\.\[\]])+\}/i;
    for (let i = 0 ; i < 100 &&  rgxp.test(str) ; i++){
        let match  = rgxp.exec(str)[0];
        let prop   = match.substring(1, match.length-1);

        //if {obj.a|obj.b} then use obj.a if exists, obj.b otherwise
        let split  = prop.split('|');
            def    = split.length > 1 ? getByString(obj, split[1], def) : def;
            prop   = split[0];

        //basic use case
        let value  = getByString(obj, prop, "");

        //just in case : check in config
        if(value === "") {
            value = global.CONFIG ? getByString(global.CONFIG, prop, def) : def;
        }
        value  = fastResolve(value);
        
        str = str.replace(match, value)
    }
    return str;
}

const fastResolve = (str) => {
    if (typeof str !== 'string') return str;
    if (str.indexOf('{cwd}') >= 0)
        str = str.replace('{cwd}', process.cwd());
    if (str.indexOf('{timestamp}') >= 0)
        str = str.replace('{timestamp}', Date.now());

    return str
}


const mkpathsync = exports.mkpathsync = (dirpath, mode) => {
    dirpath = path.resolve(dirpath);

    if (typeof mode === 'undefined') {
        mode = parseInt('0777', 8) & (~process.umask());
    }

    try {
        if (!fs.statSync(dirpath).isDirectory()) {
            throw new Error(dirpath + ' exists and is not a directory');
        }
    } catch (err) {
        if (err.code === 'ENOENT') {
            mkpathsync(path.dirname(dirpath), mode);
            fs.mkdirSync(dirpath, mode);
        } else { throw err; }
    }
};
