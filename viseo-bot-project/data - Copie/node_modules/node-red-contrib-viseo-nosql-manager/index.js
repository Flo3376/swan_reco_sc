'use strict';
/*
 * Skeleton for NOSQL database class
 * Abstract, meant to be extended by classes to handle MongoDB/NeDB/...etc operations
 */
class DatabaseManager {

    constructor(RED, node) {
        if (this.constructor === DatabaseManager) {
            throw new TypeError('Abstract class "DatabaseManager" cannot be instantiated directly.'); 
        }

    }

    /**
     * Returns a definiton for the database manager
     * This definition is saved in the DatabaseRegistry and used by Node-Red
     */
    static get definition() {
        return {
            name : "", //name displayed in Node-red editor
            qName : "" //string value used to identify the database manager
        };
    }

    /**
     * Returns an error message for the status of a node.
     * If message is empty, then we take for granted that no error occurred.
     */
    getStatus(config) {
    	return "";
    }

    /**
     * Called at the end of the execution of a node
     * Should close the database connection if applicable.
     */
    end(callback) {
    	throw new TypeError('end Method should be implemented.');
    }

    /**
     * Finds a set of result for the set of conditions
     * key      : the conditions (mongoDB syntax)
     * data     : the current node data
     * config   : the node configuration 
     * callback(err, data, results) : callback called once the request is made.
     */
    find(key, data, config, callback) {
    	throw new TypeError('find Method should be implemented.');
    }

    /**
     * Updates one line selected from conditions
     * key      : the conditions (mongoDB syntax)
     * value    : the new value
     * data     : the current node data
     * config   : the node configuration 
     * callback(err, data, result) : callback called once the request is made.
     */
    update(key, value, data, config, callback) {
    	throw new TypeError('update Method should be implemented.');
    }

    /**
     * Adds a set of lines
     * values    : the new lines
     * data     : the current node data
     * config   : the node configuration 
     * callback(err, data, result) : callback called once the request is made.
     */
    add(values, data, config, callback) {
    	throw new TypeError('add Method should be implemented.');
    }

    /**
     * Removes one line selected from conditions
     * key      : the conditions (mongoDB syntax)
     * data     : the current node data
     * config   : the node configuration 
     * callback(err, data, result) : callback called once the request is made.
     */
    remove(key, data, config, callback) {
    	throw new TypeError('remove Method should be implemented.');
    }
}

/**
 * Singleton which registers the list of database managers loaded in node-red
 *
 *
 */
global.VBM = global.VBM || {};
global.VBM._databaseRegistry = global.VBM._databaseRegistry || null;
class DatabaseRegistry {

    constructor() {
        this._list = [];
    }

    static get instance() {
        if(global.VBM._databaseRegistry === null) {
            global.VBM._databaseRegistry = new DatabaseRegistry();
        }
        return global.VBM._databaseRegistry;
    }

    get list() {
        return this._list;
    }

    get values() {
        let values = [];
        for(let value of this._list) {
            values.push(value.qName);
        }
        return values;
    }

    register(DbManager) {
        if((DbManager.prototype instanceof DatabaseManager) === false) {
            throw new TypeError("Only DatabaseManager classes can be registered");
        }
        this._list.push(DbManager.definition);
    }
}

module.exports.DbManager = DatabaseManager;
module.exports.dbRegistry = DatabaseRegistry.instance;